/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchImport } from './routes/search'
import { Route as NeighborServicesImport } from './routes/neighbor-services'
import { Route as GroupsImport } from './routes/groups'
import { Route as ExploreImport } from './routes/explore'
import { Route as EventsImport } from './routes/events'
import { Route as CreateImport } from './routes/create'
import { Route as BusinessesImport } from './routes/businesses'
import { Route as IndexImport } from './routes/index'
import { Route as NeighborServicesProfileSlugImport } from './routes/neighbor-services-profile.$slug'
import { Route as GroupSlugImport } from './routes/group.$slug'
import { Route as EventSlugImport } from './routes/event.$slug'
import { Route as BusinessSlugImport } from './routes/business.$slug'

// Create/Update Routes

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const NeighborServicesRoute = NeighborServicesImport.update({
  id: '/neighbor-services',
  path: '/neighbor-services',
  getParentRoute: () => rootRoute,
} as any)

const GroupsRoute = GroupsImport.update({
  id: '/groups',
  path: '/groups',
  getParentRoute: () => rootRoute,
} as any)

const ExploreRoute = ExploreImport.update({
  id: '/explore',
  path: '/explore',
  getParentRoute: () => rootRoute,
} as any)

const EventsRoute = EventsImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => rootRoute,
} as any)

const CreateRoute = CreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => rootRoute,
} as any)

const BusinessesRoute = BusinessesImport.update({
  id: '/businesses',
  path: '/businesses',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const NeighborServicesProfileSlugRoute =
  NeighborServicesProfileSlugImport.update({
    id: '/neighbor-services-profile/$slug',
    path: '/neighbor-services-profile/$slug',
    getParentRoute: () => rootRoute,
  } as any)

const GroupSlugRoute = GroupSlugImport.update({
  id: '/group/$slug',
  path: '/group/$slug',
  getParentRoute: () => rootRoute,
} as any)

const EventSlugRoute = EventSlugImport.update({
  id: '/event/$slug',
  path: '/event/$slug',
  getParentRoute: () => rootRoute,
} as any)

const BusinessSlugRoute = BusinessSlugImport.update({
  id: '/business/$slug',
  path: '/business/$slug',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/businesses': {
      id: '/businesses'
      path: '/businesses'
      fullPath: '/businesses'
      preLoaderRoute: typeof BusinessesImport
      parentRoute: typeof rootRoute
    }
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateImport
      parentRoute: typeof rootRoute
    }
    '/events': {
      id: '/events'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsImport
      parentRoute: typeof rootRoute
    }
    '/explore': {
      id: '/explore'
      path: '/explore'
      fullPath: '/explore'
      preLoaderRoute: typeof ExploreImport
      parentRoute: typeof rootRoute
    }
    '/groups': {
      id: '/groups'
      path: '/groups'
      fullPath: '/groups'
      preLoaderRoute: typeof GroupsImport
      parentRoute: typeof rootRoute
    }
    '/neighbor-services': {
      id: '/neighbor-services'
      path: '/neighbor-services'
      fullPath: '/neighbor-services'
      preLoaderRoute: typeof NeighborServicesImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/business/$slug': {
      id: '/business/$slug'
      path: '/business/$slug'
      fullPath: '/business/$slug'
      preLoaderRoute: typeof BusinessSlugImport
      parentRoute: typeof rootRoute
    }
    '/event/$slug': {
      id: '/event/$slug'
      path: '/event/$slug'
      fullPath: '/event/$slug'
      preLoaderRoute: typeof EventSlugImport
      parentRoute: typeof rootRoute
    }
    '/group/$slug': {
      id: '/group/$slug'
      path: '/group/$slug'
      fullPath: '/group/$slug'
      preLoaderRoute: typeof GroupSlugImport
      parentRoute: typeof rootRoute
    }
    '/neighbor-services-profile/$slug': {
      id: '/neighbor-services-profile/$slug'
      path: '/neighbor-services-profile/$slug'
      fullPath: '/neighbor-services-profile/$slug'
      preLoaderRoute: typeof NeighborServicesProfileSlugImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/businesses': typeof BusinessesRoute
  '/create': typeof CreateRoute
  '/events': typeof EventsRoute
  '/explore': typeof ExploreRoute
  '/groups': typeof GroupsRoute
  '/neighbor-services': typeof NeighborServicesRoute
  '/search': typeof SearchRoute
  '/business/$slug': typeof BusinessSlugRoute
  '/event/$slug': typeof EventSlugRoute
  '/group/$slug': typeof GroupSlugRoute
  '/neighbor-services-profile/$slug': typeof NeighborServicesProfileSlugRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/businesses': typeof BusinessesRoute
  '/create': typeof CreateRoute
  '/events': typeof EventsRoute
  '/explore': typeof ExploreRoute
  '/groups': typeof GroupsRoute
  '/neighbor-services': typeof NeighborServicesRoute
  '/search': typeof SearchRoute
  '/business/$slug': typeof BusinessSlugRoute
  '/event/$slug': typeof EventSlugRoute
  '/group/$slug': typeof GroupSlugRoute
  '/neighbor-services-profile/$slug': typeof NeighborServicesProfileSlugRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/businesses': typeof BusinessesRoute
  '/create': typeof CreateRoute
  '/events': typeof EventsRoute
  '/explore': typeof ExploreRoute
  '/groups': typeof GroupsRoute
  '/neighbor-services': typeof NeighborServicesRoute
  '/search': typeof SearchRoute
  '/business/$slug': typeof BusinessSlugRoute
  '/event/$slug': typeof EventSlugRoute
  '/group/$slug': typeof GroupSlugRoute
  '/neighbor-services-profile/$slug': typeof NeighborServicesProfileSlugRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/businesses'
    | '/create'
    | '/events'
    | '/explore'
    | '/groups'
    | '/neighbor-services'
    | '/search'
    | '/business/$slug'
    | '/event/$slug'
    | '/group/$slug'
    | '/neighbor-services-profile/$slug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/businesses'
    | '/create'
    | '/events'
    | '/explore'
    | '/groups'
    | '/neighbor-services'
    | '/search'
    | '/business/$slug'
    | '/event/$slug'
    | '/group/$slug'
    | '/neighbor-services-profile/$slug'
  id:
    | '__root__'
    | '/'
    | '/businesses'
    | '/create'
    | '/events'
    | '/explore'
    | '/groups'
    | '/neighbor-services'
    | '/search'
    | '/business/$slug'
    | '/event/$slug'
    | '/group/$slug'
    | '/neighbor-services-profile/$slug'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BusinessesRoute: typeof BusinessesRoute
  CreateRoute: typeof CreateRoute
  EventsRoute: typeof EventsRoute
  ExploreRoute: typeof ExploreRoute
  GroupsRoute: typeof GroupsRoute
  NeighborServicesRoute: typeof NeighborServicesRoute
  SearchRoute: typeof SearchRoute
  BusinessSlugRoute: typeof BusinessSlugRoute
  EventSlugRoute: typeof EventSlugRoute
  GroupSlugRoute: typeof GroupSlugRoute
  NeighborServicesProfileSlugRoute: typeof NeighborServicesProfileSlugRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BusinessesRoute: BusinessesRoute,
  CreateRoute: CreateRoute,
  EventsRoute: EventsRoute,
  ExploreRoute: ExploreRoute,
  GroupsRoute: GroupsRoute,
  NeighborServicesRoute: NeighborServicesRoute,
  SearchRoute: SearchRoute,
  BusinessSlugRoute: BusinessSlugRoute,
  EventSlugRoute: EventSlugRoute,
  GroupSlugRoute: GroupSlugRoute,
  NeighborServicesProfileSlugRoute: NeighborServicesProfileSlugRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/businesses",
        "/create",
        "/events",
        "/explore",
        "/groups",
        "/neighbor-services",
        "/search",
        "/business/$slug",
        "/event/$slug",
        "/group/$slug",
        "/neighbor-services-profile/$slug"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/businesses": {
      "filePath": "businesses.tsx"
    },
    "/create": {
      "filePath": "create.tsx"
    },
    "/events": {
      "filePath": "events.tsx"
    },
    "/explore": {
      "filePath": "explore.tsx"
    },
    "/groups": {
      "filePath": "groups.tsx"
    },
    "/neighbor-services": {
      "filePath": "neighbor-services.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/business/$slug": {
      "filePath": "business.$slug.tsx"
    },
    "/event/$slug": {
      "filePath": "event.$slug.tsx"
    },
    "/group/$slug": {
      "filePath": "group.$slug.tsx"
    },
    "/neighbor-services-profile/$slug": {
      "filePath": "neighbor-services-profile.$slug.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
