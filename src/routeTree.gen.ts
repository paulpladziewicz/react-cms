/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SearchImport } from './routes/search'
import { Route as GroupsImport } from './routes/groups'
import { Route as EventsImport } from './routes/events'
import { Route as CreateImport } from './routes/create'
import { Route as BusinessesImport } from './routes/businesses'
import { Route as IndexImport } from './routes/index'
import { Route as EventSlugImport } from './routes/event.$slug'
import { Route as SomethingGroupIndexImport } from './routes/something/group/index'

// Create/Update Routes

const SearchRoute = SearchImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRoute,
} as any)

const GroupsRoute = GroupsImport.update({
  id: '/groups',
  path: '/groups',
  getParentRoute: () => rootRoute,
} as any)

const EventsRoute = EventsImport.update({
  id: '/events',
  path: '/events',
  getParentRoute: () => rootRoute,
} as any)

const CreateRoute = CreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => rootRoute,
} as any)

const BusinessesRoute = BusinessesImport.update({
  id: '/businesses',
  path: '/businesses',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const EventSlugRoute = EventSlugImport.update({
  id: '/event/$slug',
  path: '/event/$slug',
  getParentRoute: () => rootRoute,
} as any)

const SomethingGroupIndexRoute = SomethingGroupIndexImport.update({
  id: '/something/group/',
  path: '/something/group/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/businesses': {
      id: '/businesses'
      path: '/businesses'
      fullPath: '/businesses'
      preLoaderRoute: typeof BusinessesImport
      parentRoute: typeof rootRoute
    }
    '/create': {
      id: '/create'
      path: '/create'
      fullPath: '/create'
      preLoaderRoute: typeof CreateImport
      parentRoute: typeof rootRoute
    }
    '/events': {
      id: '/events'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsImport
      parentRoute: typeof rootRoute
    }
    '/groups': {
      id: '/groups'
      path: '/groups'
      fullPath: '/groups'
      preLoaderRoute: typeof GroupsImport
      parentRoute: typeof rootRoute
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchImport
      parentRoute: typeof rootRoute
    }
    '/event/$slug': {
      id: '/event/$slug'
      path: '/event/$slug'
      fullPath: '/event/$slug'
      preLoaderRoute: typeof EventSlugImport
      parentRoute: typeof rootRoute
    }
    '/something/group/': {
      id: '/something/group/'
      path: '/something/group'
      fullPath: '/something/group'
      preLoaderRoute: typeof SomethingGroupIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/businesses': typeof BusinessesRoute
  '/create': typeof CreateRoute
  '/events': typeof EventsRoute
  '/groups': typeof GroupsRoute
  '/search': typeof SearchRoute
  '/event/$slug': typeof EventSlugRoute
  '/something/group': typeof SomethingGroupIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/businesses': typeof BusinessesRoute
  '/create': typeof CreateRoute
  '/events': typeof EventsRoute
  '/groups': typeof GroupsRoute
  '/search': typeof SearchRoute
  '/event/$slug': typeof EventSlugRoute
  '/something/group': typeof SomethingGroupIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/businesses': typeof BusinessesRoute
  '/create': typeof CreateRoute
  '/events': typeof EventsRoute
  '/groups': typeof GroupsRoute
  '/search': typeof SearchRoute
  '/event/$slug': typeof EventSlugRoute
  '/something/group/': typeof SomethingGroupIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/businesses'
    | '/create'
    | '/events'
    | '/groups'
    | '/search'
    | '/event/$slug'
    | '/something/group'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/businesses'
    | '/create'
    | '/events'
    | '/groups'
    | '/search'
    | '/event/$slug'
    | '/something/group'
  id:
    | '__root__'
    | '/'
    | '/businesses'
    | '/create'
    | '/events'
    | '/groups'
    | '/search'
    | '/event/$slug'
    | '/something/group/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BusinessesRoute: typeof BusinessesRoute
  CreateRoute: typeof CreateRoute
  EventsRoute: typeof EventsRoute
  GroupsRoute: typeof GroupsRoute
  SearchRoute: typeof SearchRoute
  EventSlugRoute: typeof EventSlugRoute
  SomethingGroupIndexRoute: typeof SomethingGroupIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BusinessesRoute: BusinessesRoute,
  CreateRoute: CreateRoute,
  EventsRoute: EventsRoute,
  GroupsRoute: GroupsRoute,
  SearchRoute: SearchRoute,
  EventSlugRoute: EventSlugRoute,
  SomethingGroupIndexRoute: SomethingGroupIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/businesses",
        "/create",
        "/events",
        "/groups",
        "/search",
        "/event/$slug",
        "/something/group/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/businesses": {
      "filePath": "businesses.tsx"
    },
    "/create": {
      "filePath": "create.tsx"
    },
    "/events": {
      "filePath": "events.tsx"
    },
    "/groups": {
      "filePath": "groups.tsx"
    },
    "/search": {
      "filePath": "search.tsx"
    },
    "/event/$slug": {
      "filePath": "event.$slug.tsx"
    },
    "/something/group/": {
      "filePath": "something/group/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
